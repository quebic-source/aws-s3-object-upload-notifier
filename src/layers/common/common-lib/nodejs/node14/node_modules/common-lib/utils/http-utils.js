const { GeneralMessage } = require("common-lib/dto/common");
const { INTERNAL_SERVER_ERROR_MESSAGE } = require("common-lib/consts/message-const");
const { APP_ID_PARAM, APP_ID_HEADER_PARAM, LOCATION_ID_PARAM, LOCATION_ID_HEADER_PARAM } = require("common-lib/consts/api-const");
const { isEmpty } = require("common-lib/utils/object-utils");
const { ValidationError } = require("./../exception");

const commonHeaders = {
    'Access-Control-Allow-Headers': "Authorization,Content-Type,Accept,appId,appid,locationid",
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'OPTIONS,POST,PUT,GET,DELETE,HEAD,PATCH',
    'Content-Type': 'application/json'
}

function getUserIdFromEvent(event) {
    return event.requestContext.authorizer.principalId?
        event.requestContext.authorizer.principalId:
        event.requestContext.authorizer.jwt.claims.username;
}

function getAppIdFromEvent(event) {
    const pathParams = getPathParams(event);
    const headers = getHeaders(event)
    const appId = pathParams[APP_ID_PARAM] || headers[APP_ID_HEADER_PARAM];
    if (appId) {
        return appId;
    } else {
        throw new ValidationError('appid header is missing in request')
    }
}

function getAppIdLocationIdFromEvent(event) {
    const appId = getAppIdFromEvent(event);
    const pathParams = getPathParams(event);
    const headers = getHeaders(event)
    const locationId = pathParams[LOCATION_ID_PARAM] || headers[LOCATION_ID_HEADER_PARAM];
    if (appId && locationId) {
        return { appId, locationId };
    } else {
        throw new ValidationError('appid header is missing in request')
    }
}

function getRequestBody(event) {
    return JSON.parse(Buffer.from(event.body, 'base64').toString("ascii"));
}

function getPathParams(event) {
    return event.pathParameters? event.pathParameters: {};
}

function getQueryStringParameters(event) {
    return event.queryStringParameters? event.queryStringParameters: {};
}

function getHeaders(event) {
    return event.headers? event.headers: {};
}

function sendGeneralMessage(message, code=200, headers={}) {
    return sendResponse(new GeneralMessage(message, code).toJSON(), code, headers)
}

function sendError(message=INTERNAL_SERVER_ERROR_MESSAGE, code=500, headers={}) {
    if (isEmpty(code)) {
        code = 500;
    }

    if (code >= 500 && code < 600) {
        message=INTERNAL_SERVER_ERROR_MESSAGE;
    }

    return sendResponse(new GeneralMessage(message, code).toJSON(), code, headers)
}

// function sendResponse(body, statusCode=200, headers={}) {
//     headers = Object.assign(headers, commonHeaders);
//     return {
//         statusCode,
//         headers: {
//             'Content-Type': 'application/json'
//         },
//         body: JSON.stringify(body)
//     };
// }

function sendResponse(body, statusCode=200, headers={}) {
    return sendRawResponse(JSON.stringify(body), statusCode, headers)
}

function sendRawResponse(body, statusCode=200, headers={}) {
    headers = Object.assign(headers, commonHeaders);
    return {
        statusCode,
        headers,
        body
    };
}

module.exports = {
    sendGeneralMessage,
    sendError,
    sendResponse,
    sendRawResponse,
    getUserIdFromEvent,
    getRequestBody,
    getPathParams,
    getQueryStringParameters,
    getHeaders,
    getAppIdFromEvent,
    getAppIdLocationIdFromEvent
}