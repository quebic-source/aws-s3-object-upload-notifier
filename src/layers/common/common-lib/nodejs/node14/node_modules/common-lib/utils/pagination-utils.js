
const { isEmpty } = require("common-lib/utils/object-utils");
const { PK_FIELD, SK_FIELD } = require("common-lib/consts/dynamo-db-const");

const defaultPageSize = 20;

class PageRequest {
    constructor({requestPage, currentPage, pageSize=defaultPageSize, orderAsc=false}) {
        this.requestPage = requestPage;
        this.currentPage = currentPage;
        this.pageSize = +pageSize;
        this.orderAsc = orderAsc;
    }
}

class DBPageRequest {
    constructor(pkValue, pageRequest) {
        const skValue = pageRequest.requestPage;
        if (!isEmpty(skValue)) {
            this.exclusiveStartKey = {};
            this.exclusiveStartKey[PK_FIELD] = pkValue;
            this.exclusiveStartKey[SK_FIELD] = skValue;
        } else {
            this.exclusiveStartKey = null;
        }
        this.pageRequest = pageRequest;
    }
}

class Pagination {
    constructor(previousPage=null, currentPage=null, nextPage=null, pageSize=defaultPageSize) {
        this.previousPage = previousPage;
        this.currentPage = currentPage;
        this.nextPage = nextPage;
        this.pageSize = pageSize;
    }
}

class PaginatedResponse {
    constructor(pagination, data) {
        this.pagination = pagination;
        this.data = data;
    }
}

function preparePaginationRequest(event) {
    if (
        isEmpty(event.queryStringParameters)
        ||
        isEmpty(event.queryStringParameters.pageSize) 
    ) {
        return new PageRequest({}); // default page request
    }
    return new PageRequest(event.queryStringParameters);
}

function preparePaginationDBRequest(pkValue, pageRequest) {
    if (isEmpty(pageRequest)) {
        return null;
    }
    return new DBPageRequest(pkValue, pageRequest);
}

function preparePaginatedResponse(dbResponse, pageRequest) {
    let nextPage = null;
    if (!isEmpty(dbResponse.LastEvaluatedKey)) {
        nextPage = dbResponse.LastEvaluatedKey[SK_FIELD];
    }
    const pagination = new Pagination(
        pageRequest.currentPage, // previous
        pageRequest.requestPage, // current
        nextPage,                // next
        pageRequest.pageSize     // pageSize
    );
    return new PaginatedResponse(pagination, dbResponse.Items);
}

module.exports = {
    PageRequest,
    Pagination,
    PaginatedResponse,
    preparePaginationRequest,
    preparePaginationDBRequest,
    preparePaginatedResponse,
}