const { APP_ID_PARAM, VERSION_PARAM } = require("common-lib/consts/api-const");
const { nanoid } = require('nanoid');

function test(msg) {
    const date = new Date();
    return `${msg} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;
}

function isEmpty(request) {
    return request == null || request == undefined || request == '';
}

function requiredFieldsCheck(request, requiredFields) {
    const missingFields = [];

    if (isEmpty(request)) {
        missingFields.push('request');
    } else {
        for (let field of requiredFields) {
            if (isEmpty(request[field])) {
                missingFields.push(field);
            }
        }
    }

    return {missingFields, valid: missingFields.length === 0};
}

function requiredFieldsCheckBotBased(request, requiredFields=[]) {
    const missingFields = [];

    if (request) {
        // default check
        requiredFields.push(APP_ID_PARAM);
        requiredFields.push(VERSION_PARAM);

        for (let field of requiredFields) {
            if (isEmpty(request[field])) {
                missingFields.push(field);
            }
        }
    } else {
        missingFields.push('request');
    }

    return {missingFields, valid: missingFields.length === 0};
}

function arrayFieldsCheck(request, arrayFields) {
    const missingFields = [];

    if (isEmpty(request)) {
        missingFields.push('request');
    } else {
        for (let field of arrayFields) {
            if (!isEmpty(request[field]) && !Array.isArray(request[field])) {
                missingFields.push(field);
            }
        }
    }

    return {missingFields, valid: missingFields.length == 0};
}

function createUniqueId(size=8) {
    return nanoid();
}

module.exports = {
    isEmpty,
    requiredFieldsCheck,
    requiredFieldsCheckBotBased,
    arrayFieldsCheck,
    createUniqueId,
    test
}